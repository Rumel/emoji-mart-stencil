/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */


import {
  Emoji as EmartEmoji
} from './components/emoji/emoji';

declare global {
  interface HTMLEmartEmojiElement extends EmartEmoji, HTMLElement {
  }
  var HTMLEmartEmojiElement: {
    prototype: HTMLEmartEmojiElement;
    new (): HTMLEmartEmojiElement;
  };
  interface HTMLElementTagNameMap {
    "emart-emoji": HTMLEmartEmojiElement;
  }
  interface ElementTagNameMap {
    "emart-emoji": HTMLEmartEmojiElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "emart-emoji": JSXElements.EmartEmojiAttributes;
    }
  }
  namespace JSXElements {
    export interface EmartEmojiAttributes extends HTMLAttributes {
      backgroundImageFn?: any;
      emoji?: any;
      fallback?: any;
      forceSize?: any;
      html?: any;
      native?: any;
      onClick?: any;
      onLeave?: any;
      onOver?: any;
      set?: any;
      sheetSize?: any;
      size?: number;
      skin?: any;
      tooltip?: any;
    }
  }
}


import {
  Picker as EmartPicker
} from './components/picker/picker';

declare global {
  interface HTMLEmartPickerElement extends EmartPicker, HTMLElement {
  }
  var HTMLEmartPickerElement: {
    prototype: HTMLEmartPickerElement;
    new (): HTMLEmartPickerElement;
  };
  interface HTMLElementTagNameMap {
    "emart-picker": HTMLEmartPickerElement;
  }
  interface ElementTagNameMap {
    "emart-picker": HTMLEmartPickerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "emart-picker": JSXElements.EmartPickerAttributes;
    }
  }
  namespace JSXElements {
    export interface EmartPickerAttributes extends HTMLAttributes {
      autoFocus?: boolean;
      backgroundImageFn?: any;
      color?: string;
      custom?: any;
      emoji?: string;
      emojiSize?: number;
      emojisToShowFilter?: any;
      emojiTooltip?: any;
      exclude?: any;
      i18n?: any;
      include?: any;
      native?: any;
      onEmojiClicked?: any;
      perLine?: number;
      pickerStyle?: any;
      recent?: any;
      set?: string;
      sheetSize?: any;
      showPreview?: boolean;
      skin?: any;
      title?: string;
      width?: string;
    }
  }
}

