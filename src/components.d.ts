/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import {
  EmojiProps,
} from './components/emoji/emojiProps';

import {
  Emoji as EmartEmoji
} from './components/emoji/emoji';

declare global {
  interface HTMLEmartEmojiElement extends EmartEmoji, HTMLElement {
  }
  var HTMLEmartEmojiElement: {
    prototype: HTMLEmartEmojiElement;
    new (): HTMLEmartEmojiElement;
  };
  interface HTMLElementTagNameMap {
    "emart-emoji": HTMLEmartEmojiElement;
  }
  interface ElementTagNameMap {
    "emart-emoji": HTMLEmartEmojiElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "emart-emoji": JSXElements.EmartEmojiAttributes;
    }
  }
  namespace JSXElements {
    export interface EmartEmojiAttributes extends HTMLAttributes {
      backgroundImageFn?: any;
      emoji?: any;
      fallback?: any;
      forceSize?: any;
      html?: any;
      native?: any;
      onClick?: any;
      onLeave?: any;
      onOver?: any;
      set?: any;
      sheetSize?: any;
      size?: number;
      skin?: any;
      tooltip?: any;
    }
  }
}


import {
  Preview as EmartPreview
} from './components/preview/preview';

declare global {
  interface HTMLEmartPreviewElement extends EmartPreview, HTMLElement {
  }
  var HTMLEmartPreviewElement: {
    prototype: HTMLEmartPreviewElement;
    new (): HTMLEmartPreviewElement;
  };
  interface HTMLElementTagNameMap {
    "emart-preview": HTMLEmartPreviewElement;
  }
  interface ElementTagNameMap {
    "emart-preview": HTMLEmartPreviewElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "emart-preview": JSXElements.EmartPreviewAttributes;
    }
  }
  namespace JSXElements {
    export interface EmartPreviewAttributes extends HTMLAttributes {
      emoji?: any;
      emojiProps?: EmojiProps;
      idleEmoji?: string;
      skinsProps?: object;
      title?: string;
    }
  }
}

